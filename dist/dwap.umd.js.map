{"version":3,"sources":["../src/repository.ts","../src/view-binder.ts","../src/dwap.ts"],"names":[],"mappings":"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","file":"dwap.umd.js","sourceRoot":"","sourcesContent":["import { District, Province, Regency, RegionData, Village } from './domain.js';\r\n\r\nexport class Repository {\r\n    constructor(\r\n        private CDN: string,\r\n    ) {}\r\n\r\n    private async request<T>(url: string) {\r\n        const response = await fetch(url);\r\n        return (await response.json()) as T;\r\n    }\r\n\r\n    private async getMany<T extends RegionData>(\r\n        type: string,\r\n        provinceId?: string,\r\n        regencyId?: string,\r\n        districtId?: string,\r\n    ) {\r\n        if (!provinceId) {\r\n            return this.request<Array<T>>(\r\n                this.CDN\r\n                + '/data/' + type + '.json'\r\n            );\r\n        }\r\n        if (!regencyId) {\r\n            return this.request<Array<T>>(\r\n                this.CDN\r\n                + '/data/provinces/' + provinceId\r\n                + '/' + type + '.json'\r\n            );\r\n        }\r\n        if (!districtId) {\r\n            return this.request<Array<T>>(\r\n                this.CDN\r\n                + '/data/provinces/' + provinceId\r\n                + '/regencies/' + regencyId\r\n                + '/' + type + '.json'\r\n            );\r\n        }\r\n        return this.request<Array<T>>(\r\n            this.CDN\r\n            + '/data/provinces/' + provinceId\r\n            + '/regencies/' + regencyId\r\n            + '/districts/' + districtId\r\n            + '/' + type + '.json'\r\n        );\r\n    }\r\n\r\n    public async getProvinces() {\r\n        return this.getMany<Province>('provinces');\r\n    }\r\n\r\n    public async getRegencies(provinceId?: string) {\r\n        return this.getMany<Regency>('regencies', provinceId);\r\n    }\r\n\r\n    public async getDistricts(provinceId?: string, regencyId?: string) {\r\n        return this.getMany<District>('districts', provinceId, regencyId);\r\n    }\r\n\r\n    public async getVillages(provinceId?: string, regencyId?: string, districtId?: string) {\r\n        return this.getMany<Village>('villages', provinceId, regencyId, districtId);\r\n    }\r\n\r\n    public async getProvince(provinceId: string) {\r\n        return this.request<Province>(\r\n            this.CDN\r\n            + '/data/provinces/' + provinceId\r\n            + '.json'\r\n        );\r\n    }\r\n\r\n    public async getRegency(provinceId: string, regencyId: string) {\r\n        return this.request<Regency>(\r\n            this.CDN\r\n            + '/data/provinces/' + provinceId\r\n            + '/regencies/' + regencyId\r\n            + '.json'\r\n        );\r\n    }\r\n\r\n    public async getDistrict(provinceId: string, regencyId: string, districtId: string) {\r\n        return this.request<District>(\r\n            this.CDN\r\n            + '/data/provinces/' + provinceId\r\n            + '/regencies/' + regencyId\r\n            + '/districts/' + districtId\r\n            + '.json'\r\n        );\r\n    }\r\n\r\n    public async getVillage(provinceId: string, regencyId: string, districtId: string, villageId: string) {\r\n        return this.request<Village>(\r\n                this.CDN\r\n                + '/data/provinces/' + provinceId\r\n                + '/regencies/' + regencyId\r\n                + '/districts/' + districtId\r\n                + '/villages/' + villageId\r\n                + '.json'\r\n            );\r\n    }\r\n}\r\n","import { District, Province, Regency, RegionData, Village } from './domain.js';\r\nimport { Repository } from './repository.js';\r\n\r\ntype EventListener = (addressCode: string) => void;\r\n\r\ninterface EventListeners {\r\n    [key: string]: Array<EventListener>;\r\n}\r\n\r\ninterface DecodedAddressCode {\r\n    province?: Province;\r\n    regency?: Regency;\r\n    district?: District;\r\n    village?: Village;\r\n}\r\n\r\nexport class ViewBinder {\r\n    static PROVINCE_SELECT_QUERY = '.dwap-province';\r\n    static REGENCY_SELECT_QUERY = '.dwap-regency';\r\n    static DISTRICT_SELECT_QUERY = '.dwap-district';\r\n    static VILLAGE_SELECT_QUERY = '.dwap-village';\r\n\r\n    public destroy = () => {};\r\n    private eventListeners: EventListeners = {};\r\n    private setValueQueue: Promise<void> = Promise.resolve();\r\n\r\n    constructor(\r\n        private el: HTMLElement,\r\n        private repo: Repository,\r\n        defaultAddressCode?: string,\r\n    ) {\r\n        const handleProvinceChange = () => {\r\n            this.setValue(this.provinceCode);\r\n        };\r\n\r\n        const handleRegencyChange = () => {\r\n            this.setValue(this.provinceCode, this.regencyCode);\r\n        };\r\n\r\n        const handleDistrictChange = () => {\r\n            this.setValue(\r\n                this.provinceCode,\r\n                this.regencyCode,\r\n                this.districtCode\r\n            );\r\n        };\r\n\r\n        const handleVillageChange = () => {\r\n            this.emit('change', this.addressCode);\r\n        };\r\n\r\n        this.provinceSelect.addEventListener('change', handleProvinceChange);\r\n        this.regencySelect.addEventListener('change', handleRegencyChange);\r\n        this.districtSelect.addEventListener('change', handleDistrictChange);\r\n        this.villageSelect.addEventListener('change', handleVillageChange);\r\n\r\n        this.destroy = () => {\r\n            this.provinceSelect.removeEventListener('change', handleProvinceChange);\r\n            this.regencySelect.removeEventListener('change', handleRegencyChange);\r\n            this.districtSelect.removeEventListener('change', handleDistrictChange);\r\n            this.villageSelect.removeEventListener('change', handleVillageChange);\r\n            this.el = null;\r\n            this.repo = null;\r\n            this.eventListeners = null;\r\n        };\r\n\r\n        this.setAddressCode(defaultAddressCode);\r\n    }\r\n\r\n    public addEventListener(type: string, listener: EventListener): void {\r\n        const listeners = this.eventListeners[type] || (this.eventListeners[type] = []);\r\n        if (listeners.indexOf(listener) === -1) {\r\n            listeners.push(listener);\r\n        }\r\n    }\r\n\r\n    public removeEventListener(type: string, listener: EventListener) {\r\n        this.eventListeners[type] = (this.eventListeners[type] || [])\r\n            .filter((_listener) => {\r\n                return _listener !== listener;\r\n            });\r\n    }\r\n\r\n    public get provinceCode() {\r\n        return this.getValueFromSelect(this.provinceSelect);\r\n    }\r\n\r\n    public get regencyCode() {\r\n        return this.getValueFromSelect(this.regencySelect);\r\n    }\r\n\r\n    public get districtCode() {\r\n        return this.getValueFromSelect(this.districtSelect);\r\n    }\r\n\r\n    public get villageCode() {\r\n        return this.getValueFromSelect(this.villageSelect);\r\n    }\r\n\r\n    public get addressCode() {\r\n        return this.provinceCode + this.regencyCode + this.districtCode + this.villageCode;\r\n    }\r\n\r\n    public async setValue(provinceId?: string, regencyId?: string, districtId?: string, villageId?: string) {\r\n        this.regencySelect.disabled = true;\r\n        this.districtSelect.disabled = true;\r\n        this.villageSelect.disabled = true;\r\n        return this.setValueQueue = this.setValueQueue\r\n            .then(async () => {\r\n                const [_, emptyRegency, emptyDistrict, emptyVillage] = await Promise.all([\r\n                    this.renderProvinces(provinceId).then(() => false),\r\n                    provinceId\r\n                        ? this.renderRegencies(provinceId, regencyId).then(() => false)\r\n                        : Promise.resolve(true),\r\n                    provinceId && regencyId\r\n                        ? this.renderDistricts(provinceId, regencyId, districtId).then(() => false)\r\n                        : Promise.resolve(true),\r\n                    provinceId && regencyId && districtId\r\n                        ? this.renderVillages(provinceId, regencyId, districtId, villageId).then(() => false)\r\n                        : Promise.resolve(true),\r\n                ]);\r\n                [\r\n                    { isEmpty: emptyRegency, select: this.regencySelect },\r\n                    { isEmpty: emptyDistrict, select: this.districtSelect },\r\n                    { isEmpty: emptyVillage, select: this.villageSelect },\r\n                ].forEach(({ isEmpty, select }) => {\r\n                    if (isEmpty) {\r\n                        this.emptyOptions(select);\r\n                        select.disabled = true;\r\n                    }\r\n                });\r\n                return this.setValueQueue = Promise.resolve();\r\n            })\r\n            .catch(() => {\r\n                return this.setValueQueue = Promise.resolve();\r\n            });\r\n    }\r\n\r\n    public async setAddressCode(addressCode: string = '') {\r\n        return this.setValue(\r\n            addressCode.slice(0, 2),\r\n            addressCode.slice(2, 4),\r\n            addressCode.slice(4, 6),\r\n            addressCode.slice(6),\r\n        );\r\n    }\r\n\r\n    public async decodeAddressCode(addressCode: string): Promise<DecodedAddressCode> {\r\n        const provinceId = addressCode.slice(0, 2);\r\n        const regencyId = addressCode.slice(2, 4);\r\n        const districtId = addressCode.slice(4, 6);\r\n        const villageId = addressCode.slice(6);\r\n        const isValidProvinceId = provinceId.length === 2;\r\n        const isValidRegencyId = regencyId.length === 2;\r\n        const isValidDistrictId = districtId.length === 2;\r\n        const isValidVillageId = villageId.length > 1;\r\n        const promises = [\r\n            isValidProvinceId\r\n                ? this.repo.getProvince(provinceId)\r\n                : Promise.resolve(null),\r\n            isValidProvinceId && isValidRegencyId\r\n                ? this.repo.getRegency(provinceId, regencyId)\r\n                : Promise.resolve(null),\r\n            isValidProvinceId && isValidRegencyId && isValidDistrictId\r\n                ? this.repo.getDistrict(provinceId, regencyId, districtId)\r\n                : Promise.resolve(null),\r\n            isValidProvinceId && isValidRegencyId && isValidDistrictId && isValidVillageId\r\n                ? this.repo.getVillage(provinceId, regencyId, districtId, villageId)\r\n                : Promise.resolve(null),\r\n        ];\r\n        const [province, regency, district, village] = await Promise.all(promises);\r\n        return { province, regency, district, village };\r\n    }\r\n\r\n    private emit(type: string, payload: string) {\r\n        (this.eventListeners[type] = this.eventListeners[type] || [])\r\n            .forEach((listener) => {\r\n                return listener(payload);\r\n            });\r\n    }\r\n\r\n    private get provinceSelect() {\r\n        return this.el.querySelector(ViewBinder.PROVINCE_SELECT_QUERY) as HTMLSelectElement;\r\n    }\r\n\r\n    private get regencySelect() {\r\n        return this.el.querySelector(ViewBinder.REGENCY_SELECT_QUERY) as HTMLSelectElement;\r\n    }\r\n\r\n    private get districtSelect() {\r\n        return this.el.querySelector(ViewBinder.DISTRICT_SELECT_QUERY) as HTMLSelectElement;\r\n    }\r\n\r\n    private get villageSelect() {\r\n        return this.el.querySelector(ViewBinder.VILLAGE_SELECT_QUERY) as HTMLSelectElement;\r\n    }\r\n\r\n    private getValueFromSelect(select: HTMLSelectElement): string|null {\r\n        if (!select) return null;\r\n        const option = select.options.item(select.selectedIndex);\r\n        return option ? option.value : null;\r\n    }\r\n\r\n    private emptyOptions(select: HTMLSelectElement) {\r\n        while (select.options.length !== 0) {\r\n            select.options.remove(0);\r\n        }\r\n    }\r\n\r\n    private renderOptions(select: HTMLSelectElement, options: Array<RegionData>) {\r\n        this.emptyOptions(select);\r\n        options.forEach((data) => {\r\n            const option = document.createElement('option');\r\n            option.value = data.id;\r\n            option.textContent = data.name;\r\n            select.appendChild(option);\r\n        });\r\n    }\r\n\r\n    private setSelected(select: HTMLSelectElement, value: string) {\r\n        if (value) {\r\n            const optionIndex = Array.from(select.options)\r\n                .findIndex((option) => {\r\n                    return option.value === value;\r\n                });\r\n            if (optionIndex === -1) {\r\n                this.renderPlaceholderOption(select);\r\n                select.selectedIndex = 0;\r\n            } else {\r\n                select.selectedIndex = optionIndex;\r\n            }\r\n        } else {\r\n            this.renderPlaceholderOption(select);\r\n            select.selectedIndex = 0;\r\n        }\r\n    }\r\n\r\n    private renderPlaceholderOption(select: HTMLSelectElement) {\r\n        const firstOption = select.options.item(0);\r\n        const isPlaceholderExist = firstOption\r\n            ? firstOption.dataset.placeholder === 'placeholder'\r\n            : false;\r\n        if (!isPlaceholderExist) {\r\n            const option = document.createElement('option');\r\n            option.dataset.placeholder = 'placeholder'\r\n            option.disabled = true;\r\n            option.textContent = '--- Pilih ---';\r\n            select.insertAdjacentElement('afterbegin', option);\r\n        }\r\n    }\r\n\r\n    private async renderProvinces(provinceId: string) {\r\n        const select = this.provinceSelect;\r\n        select.disabled = true;\r\n        if (select.dataset.rendered !== 'rendered') {\r\n            const options = await this.repo.getProvinces();\r\n            this.renderOptions(select, options);\r\n            select.dataset.rendered = 'rendered';\r\n        }\r\n        this.setSelected(select, provinceId);\r\n        select.disabled = false;\r\n    }\r\n\r\n    private async renderRegencies(provinceId: string, regencyId: string) {\r\n        const select = this.regencySelect;\r\n        select.disabled = true;\r\n        if (select.dataset.provinceId !== provinceId) {\r\n            const options = await this.repo.getRegencies(provinceId);\r\n            this.renderOptions(select, options);\r\n            select.dataset.provinceId = provinceId;\r\n        }\r\n        this.setSelected(select, regencyId);\r\n        select.disabled = false;\r\n    }\r\n\r\n    private async renderDistricts(provinceId: string, regencyId: string, districtId: string) {\r\n        const select = this.districtSelect;\r\n        select.disabled = true;\r\n        if (select.dataset.regencyId !== regencyId) {\r\n            const options = await this.repo.getDistricts(provinceId, regencyId);\r\n            this.renderOptions(select, options);\r\n            select.dataset.regencyId = regencyId;\r\n        }\r\n        this.setSelected(select, districtId);\r\n        select.disabled = false;\r\n    }\r\n\r\n    private async renderVillages(provinceId: string, regencyId: string, districtId: string, villageId: string) {\r\n        const select = this.villageSelect;\r\n        select.disabled = true;\r\n        if (select.dataset.districtId !== districtId) {\r\n            const options = await this.repo.getVillages(provinceId, regencyId, districtId);\r\n            this.renderOptions(select, options);\r\n            select.dataset.districtId = districtId;\r\n        }\r\n        this.setSelected(select, villageId);\r\n        select.disabled = false;\r\n    }\r\n}\r\n","export { Repository } from './repository.js';\r\nexport { ViewBinder } from './view-binder.js';\r\n"]}